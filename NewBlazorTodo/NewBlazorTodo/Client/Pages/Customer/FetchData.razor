@page "/customerlist"
@inject HttpClient client
@inject IJSRuntime js

<h3>Företagskunder</h3>

<div class="form-group">
    <a class="btn btn-success" href="customer/create"><i class="oi oi-plus"></i> Lägg till ny kund</a>
</div>
<br>

@if (customers == null)
{
    <text>Loading...</text>
}
else if (customers.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Företagskund</th>
                <th>KontaktPerson</th>
                <th>Telefonnummer</th>
                <th>Stad</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Customers customer in customers)
            {
            <tr>
                <td>@customer.Company</td>
                <td>@customer.Name</td>
                <td>@customer.Phone</td>
                <td>@customer.City</td>
                <td>
                    <a class="btn btn-success" href="customer/details/@customer.Id">Mer Info</a>
                    @*<button class="btn btn-danger" @onclick="@(() => Delete(customer.Id))">Delete</button>*@
                </td>
            </tr>
            }

        </tbody>
    </table>
}
@code {
    Customers[] customers { get; set; }
    protected override async Task OnInitializedAsync()
    {
        customers = await client.GetFromJsonAsync<Customers[]>("https://localhost:44374/api/customers");
    }

    //async Task Delete(int id)
    //{
    //    var customer = customers.First(x => x.Id == id);
    //    if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer.Name}'s ({customer.Company}) Record?"))
    //    {
    //        await client.DeleteAsync($"https://localhost:44374/api/customers/ {id}");
    //        await OnInitializedAsync();
    //    }
    //}
}