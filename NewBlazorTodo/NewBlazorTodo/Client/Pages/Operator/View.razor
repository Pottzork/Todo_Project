@page "/operator/details/{operatorId:int}"
@inject HttpClient client
@inject NavigationManager uriHelper
@inject IJSRuntime js


<table id="customers" class="table table-bordered table-danger">
    <tr id="testing"></tr>
    <tr><th>Id: @_operator.Id</th></tr>
    <tr><th>Förnamn: @_operator.FirstName</th></tr>
    <tr><th>Efternamn: @_operator.LastName</th></tr>
    <tr><th>Epost: @_operator.Email</th></tr>
    <tr><th>Telefonnummer: @_operator.Phone</th></tr>
    <tr><th>Användarnamn: @_operator.UserName</th></tr>
    <tr><th>Lösenord: @_operator.Password</th></tr>
    <tr><th>Nuvarande plats: @_operator.Location</th></tr>

</table>

<div class="BackButton">
    <button class="btn btn-dark" @onclick="@GetBackOnePage">Tillbaks till operatörer</button>
    <a class="btn btn-success" href="operator/edit/@_operator.Id">Edit</a>
    <button class="btn btn-danger" @onclick="@(() => Delete(_operator.Id))">Ta bort @_operator.FirstName</button>

</div>


@code{
    [Parameter] public int operatorId { get; set; }
    Operators _operator = new Operators();

    protected override async Task OnInitializedAsync()
    {
        _operator = await client.GetFromJsonAsync<Operators>($"https://localhost:44374/api/operators/ {operatorId}");
    }

    public void GetBackOnePage()
    {
        uriHelper.NavigateTo("operatorlist");
    }

    async Task Delete(int id)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Vill du ta bort {_operator.FirstName}'s med ID: ({_operator.Id}) som operatör?"))
        {
            await client.DeleteAsync($"https://localhost:44374/api/operators/ {id}");
            GetBackOnePage();  
        }
    }

}
